#!/usr/bin/env python
# -*- coding: utf-8 -*-

__version__ = "0.1"
__author__  = "Philipp Ross"
__contact__ = "philippross369@gmail.com"
__license__ = "Apache v2.0"

# import modules
import os
import sys
import argparse
import subprocess

def main():

	parser = argparse.ArgumentParser(description = "htseq-count raw counts to counts per million (cpm) values")
	parser.add_argument("-b", "--bam", dest = "bam", help = "BAM file from which counts were generated")
	parser.add_argument("-c", "--counts", dest = "counts", help = "Counts file generated by htseq-count for input bam file")
	parser.add_argument("-i", "--id", dest = "gene_id", help = "If not GTF file what id column should be used for gene id", default = "gene_id") 
	args = parser.parse_args()

	# check for samtools
	p = subprocess.Popen("which samtools", shell=True, stdout=subprocess.PIPE)
	out, err = p.communicate()
	if out is None:
		print >> sys.stderr, "samtools executable not found in your path! Abort!"
		sys.exit(1)
	# get number of mapped reads
	if args.bam:
		p = subprocess.Popen("samtools view -F 4 -c " + args.bam, shell=True, stdout=subprocess.PIPE)
		out, err = p.communicate()
		mapped_reads = int(out)

	if args.counts:
		with open(args.counts) as counts:
			for line in counts:
				line = line.split("\t")
				gene = line[0]
				count = int(line[1])
				if "__" in gene:
					cpm = count
				else:
					cpm = (float(count) / mapped_reads) * (10**6)
				print >> sys.stdout, "%s\t%s" % (gene, str(cpm))
	

if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		sys.stderr.write("User interrupt! Ciao!\n")
		sys.exit(0)
